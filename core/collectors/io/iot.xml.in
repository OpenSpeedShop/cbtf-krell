<?xml version="1.0" encoding="utf-8"?>

<!--
Copyright (c) 2011 Krell Institute. All Rights Reserved.
    
This library is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2.1 of the License, or (at your option)
any later version.
    
This library is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
details.
    
You should have received a copy of the GNU Lesser General Public License
along with this library; if not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<MRNet xmlns="http://www.krellinst.org/CBTF/MRNet.xsd">

  <Type>iot</Type>
  <Version>1.0.0</Version>

<!--
   Declare streams used by this distributed component to communicate
   within xml component.
-->

<!--
  Stream representing threads that have been attached to a
  a collection service.
-->
  <Stream>
    <Name>CBTF_PROTOCOL_TAG_ATTACHED_TO_THREADS</Name>
    <Tag>1101</Tag>
  </Stream>
<!--
  Stream representing a process created event.
-->
  <Stream>
    <Name>CBTF_PROTOCOL_TAG_CREATED_PROCESS</Name>
    <Tag>1104</Tag>
  </Stream>
<!--
  Stream representing a linked object (dso) has been loaded
  in to a process or thread.  This is intended to handle dlopen
  events.
-->
  <Stream>
    <Name>CBTF_PROTOCOL_TAG_LOADED_LINKED_OBJECT</Name>
    <Tag>1116</Tag>
  </Stream>
<!--
  Stream representing a linked object (dso) has been unloaded
  by a process or thread.  This is intended to handle dlclose
  events.
-->
  <Stream>
    <Name>CBTF_PROTOCOL_TAG_UNLOADED_LINKED_OBJECT</Name>
    <Tag>1126</Tag>
  </Stream>
<!--
  Stream representing a group linked objects (dso's and executable).
-->
  <Stream>
    <Name>CBTF_PROTOCOL_TAG_LINKED_OBJECT_GROUP</Name>
    <Tag>1128</Tag>
  </Stream>
<!--
  Stream used to send performance data blobs for
  recording in a database or further processing.
-->
  <Stream>
    <Name>CBTF_PROTOCOL_TAG_PERFORMANCE_DATA</Name>
    <Tag>10000</Tag>
  </Stream>
<!--
  Stream to send thread state changed messages.
-->
  <Stream>
    <Name>CBTF_PROTOCOL_TAG_THREADS_STATE_CHANGED</Name>
    <Tag>1124</Tag>
  </Stream>

<!--
   Declare output of this distributed component. Used to communicate
   data back to a tool client that registers this xml component and
   has inputs to handle the datum from any of these outputs. 
-->

<!--
  FIXME. This output needs a descriptive name.  It currently
  sends the notification that all threads are finished.
-->
  <Output>
      <Name>output</Name>
      <From><Output>output_from_frontend</Output></From>
  </Output>

<!--
  Send process creation message to a client tool that has resistered
  this xml component and handles this message.
-->
  <Output>
      <Name>created_process_xdr_output</Name>
      <From><Output>created_process_xdr_output_from_frontend</Output></From>
  </Output>

<!--
  Send attached to threads  message to a client tool that has resistered
  this xml component and handles this message.
-->
  <Output>
      <Name>attached_to_threads_xdr_output</Name>
      <From><Output>attached_threads_xdr_output_from_frontend</Output></From>
  </Output>

<!--
  Send threads  state changed message to a client tool that has resistered
  this xml component and handles this message.
-->
  <Output>
      <Name>threads_state_changed_xdr_output</Name>
      <From><Output>threads_state_changed_xdr_output_from_frontend</Output></From>
  </Output>

<!--
  Send loaded linked object message to a client tool that has resistered
  this xml component and handles this message.
-->
  <Output>
      <Name>loaded_linkedobject_xdr_output</Name>
      <From><Output>loaded_linkedobject_xdr_output_from_frontend</Output></From>
  </Output>

<!--
  Send unloaded linked object message to a client tool that has resistered
  this xml component and handles this message.
-->
  <Output>
      <Name>unloaded_linkedobject_xdr_output</Name>
      <From><Output>unloaded_linkedobject_xdr_output_from_frontend</Output></From>
  </Output>

<!--
  Send linked objects initially loaded in to a process or thread. This
  represents the addressspace in terms of time and address range for each
  linkedobject.
  The time interval is represented by the time recorded when the
  process/thread started and the end time is expressed as the
  largest time value that can be expressed.
-->
  <Output>
      <Name>linkedobjectgroup_xdr_output</Name>
      <From><Output>linkedobjectgroup_xdr_output_from_frontend</Output></From>
  </Output>

<!--
  Send performance data xdr blob message to a client tool that has resistered
  this xml component and handles this message.
-->
  <Output>
      <Name>perfdata_xdr_output</Name>
      <From><Output>perfdata_xdr_output_from_frontend</Output></From>
  </Output>

<!--
  Send addressbuffer to a client tool that has resistered
  this xml component and handles this message.
-->
  <Output>
      <Name>addressbuffer_output</Name>
      <From><Output>addressbuffer_from_frontend</Output></From>
  </Output>

  <Output>
      <Name>linkedobjectentryvec_output</Name>
      <From><Output>linkedobjectentryvec_from_frontend</Output></From>
  </Output>

<!--
  Send symboltable message to a client tool that has resistered
  this xml component and handles this message.
-->
  <Output>
      <Name>symboltable_xdr_output</Name>
      <From><Output>symboltable_xdr_output_from_frontend</Output></From>
  </Output>
 
  <Frontend>

    <Network xmlns="http://www.krellinst.org/CBTF/Network">

      <Type>iot_Frontend</Type>
      <Version>1.0.0</Version>

      <SearchPath>@@component_location@@</SearchPath>

      <Plugin>CollectionPlugin.so</Plugin>

<!--
     The AddressAggregator component.  The operations done in this network
     are intended to run only on the Frontend.
-->
      <Component>
        <Name>Aggregator</Name>
        <Type>AddressAggregator</Type>
      </Component>

<!--
     The LinkedObject component.  The operations done in this network
     essentially pass on linkedobject datum to a client tool.
-->
      <Component>
        <Name>LinkedObject</Name>
        <Type>LinkedObject</Type>
      </Component>

<!--
     The ThreadStateChanged component.  The operations done in this network
     essentially pass on thread state changed events to a client tool.
     In addition, this component will notify the client tool when all
     threads for which a BE attached a thread have terminated.
-->
      <Component>
        <Name>ThreadsStateChanged</Name>
        <Type>ThreadsStateChanged</Type>
      </Component>

<!--
     The AttachedToThreads component.  The operations done in this network
     essentially pass on the threads the a BE has sent an attached threads
     message to a client tool. This component also has a connection to
     the Aggregator component to pass the list of currently attached threads.
-->
      <Component>
        <Name>AttachedToThreads</Name>
        <Type>AttachedToThreads</Type>
      </Component>

<!--
     The CreatedProcess component.  The operations done in this component
     essentially pass on created process events to a client tool.
-->
      <Component>
        <Name>CreatedProcess</Name>
        <Type>CreatedProcess</Type>
      </Component>
 
      <Component>
        <Name>ResolveSymbols</Name>
        <Type>ResolveSymbols</Type>
      </Component>

<!--
    Input to handle incoming performance data blobs.  These are
    passed on untouched by this FrontEnd network to a client tool.
-->
      <Input>
        <Name>IncomingBlobs</Name>
        <To>
          <Name>Aggregator</Name>
          <Input>pass_cbtf_protocol_blob</Input>
        </To>
      </Input>

<!--
    Input to handle incoming aggregated addressbuffers.  These are
    aggregated by this FrontEnd network and a final buffer is sent
    to a client tool.
-->
      <Input>
        <Name>IncomingBuffers</Name>
        <To>
          <Name>Aggregator</Name>
          <Input>addressBuffer</Input>
        </To>
      </Input>

<!--
    Input to handle incoming loaded linkedobject events.  These are
    passed on untouched by this FrontEnd network to a client tool.
-->
      <Input>
        <Name>IncomingLoadedLinkedObject</Name>
        <To>
          <Name>LinkedObject</Name>
          <Input>loaded</Input>
        </To>
      </Input>

<!--
    Input to handle incoming loaded linkedobject group events.  These are
    passed on untouched by this FrontEnd network to a client tool once
    all threads that have attached have sent this message.
-->
      <Input>
        <Name>IncomingLinkedObjectGroup</Name>
        <To>
          <Name>LinkedObject</Name>
          <Input>group</Input>
        </To>
      </Input>

<!--
    Input to handle incoming thread state changed events.  These are
    passed on untouched by this FrontEnd network to a client tool.
    In addition, this input handler watches for terminated state and keeps
    a count of termeinated threads.
-->
      <Input>
        <Name>IncomingThreadsStateChanged</Name>
        <To>
          <Name>ThreadsStateChanged</Name>
          <Input>in</Input>
        </To>
      </Input>

<!--
    Input to handle incoming attached to thread events.  These are
    passed on untouched by this FrontEnd network to a client tool.
-->
      <Input>
        <Name>IncomingAttachedToThreads</Name>
        <To>
          <Name>AttachedToThreads</Name>
          <Input>in</Input>
        </To>
      </Input>

<!--
    Input to handle incoming created process events.  These are
    passed on untouched by this FrontEnd network to a client tool.
-->
      <Input>
        <Name>IncomingCreatedProcess</Name>
        <To>
          <Name>CreatedProcess</Name>
          <Input>in</Input>
        </To>
      </Input>

<!--
     Connection to send list of attached threads to the aggregator.
     This is a sync connection used by the aggregator to wait for
     all attached threads to send at least one addressbuffer.
-->
      <Connection>
        <From>
            <Name>AttachedToThreads</Name>
            <Output>out</Output>
        </From>
        <To>
            <Name>Aggregator</Name>
            <Input>threadnames</Input>
        </To>
      </Connection>

      <Connection>
        <From>
            <Name>ThreadsStateChanged</Name>
            <Output>out1</Output>
        </From>
        <To>
            <Name>Aggregator</Name>
            <Input>finished</Input>
        </To>
      </Connection>



<!--
     Connection to send list of attached threads to the linkedobject component.
     This is a sync connection used by the linkedobject component to wait for
     all attached threads to send a group of initially loaded linkedobjects.
-->
      <Connection>
        <From>
            <Name>AttachedToThreads</Name>
            <Output>out</Output>
        </From>
        <To>
            <Name>LinkedObject</Name>
            <Input>threadnames</Input>
        </To>
      </Connection>

<!--
     FIXME: need a descriptive name for this output.
     Currently this sends the client tool notification that all
     threads have terminated.
-->
      <Output>
         <Name>output_from_frontend</Name>
         <From>
            <Name>ThreadsStateChanged</Name>
            <Output>out1</Output>
         </From>
      </Output>

<!--
     Output created process message to client tool that has registered
     this distributed xml component and handles this meesage.
-->
      <Output>
         <Name>created_process_xdr_output_from_frontend</Name>
         <From>
            <Name>CreatedProcess</Name>
            <Output>xdr_out</Output>
         </From>
      </Output>

<!--
     Output attached to threads message to client tool that has registered
     this distributed xml component and handles this meesage.
-->
      <Output>
         <Name>attached_threads_xdr_output_from_frontend</Name>
         <From>
            <Name>AttachedToThreads</Name>
            <Output>xdr_out</Output>
         </From>
      </Output>

<!--
     Output threads state changed message to client tool that has registered
     this distributed xml component and handles this meesage.
-->
      <Output>
         <Name>threads_state_changed_xdr_output_from_frontend</Name>
         <From>
            <Name>ThreadsStateChanged</Name>
            <Output>xdr_out</Output>
         </From>
      </Output>

<!--
     Output loaded linkedobject message to client tool that has registered
     this distributed xml component and handles this meesage.
-->
      <Output>
         <Name>loaded_linkedobject_xdr_output_from_frontend</Name>
         <From>
            <Name>LinkedObject</Name>
            <Output>loaded_xdr_out</Output>
         </From>
      </Output>

<!--
     Output unloaded linkedobject message to client tool that has registered
     this distributed xml component and handles this meesage.
-->
      <Output>
         <Name>unloaded_linkedobject_xdr_output_from_frontend</Name>
         <From>
            <Name>LinkedObject</Name>
            <Output>unloaded_xdr_out</Output>
         </From>
      </Output>

<!--
     Output loaded linkedobject group message to client tool that has
     registered this distributed xml component and handles this meesage.
-->
      <Output>
         <Name>linkedobjectgroup_xdr_output_from_frontend</Name>
         <From>
            <Name>LinkedObject</Name>
            <Output>group_xdr_out</Output>
         </From>
      </Output>

<!--
     Output performance data blob messages to client tool that has
     registered this distributed xml component and handles this meesage.
-->
      <Output>
        <Name>perfdata_xdr_output_from_frontend</Name>
        <From>
          <Name>Aggregator</Name>
          <Output>datablob_xdr_out</Output>
        </From>
      </Output>

<!--
     Output addressbuffer messages to client tool that has
     registered this distributed xml component and handles this meesage.
-->
      <Output>
        <Name>addressbuffer_from_frontend</Name>
        <From>
          <Name>Aggregator</Name>
          <Output>Aggregatorout</Output>
        </From>
      </Output>

<!--
     FIXME: Unused. oss cbtf instrumentor knows about this for now.
-->
      <Output>
        <Name>linkedobjectentryvec_from_frontend</Name>
        <From>
          <Name>LinkedObject</Name>
          <Output>linkedobjectvec_out</Output>
        </From>
      </Output>

      <Output>
        <Name>symboltable_xdr_output_from_frontend</Name>
        <From>
          <Name>ResolveSymbols</Name>
          <Output>symboltable_xdr_out</Output>
        </From>
      </Output>

    </Network>

<!--
    Incoming addressbuffers.
-->
    <IncomingUpstream>
      <Name>Buffers</Name>
      <To><Input>IncomingBuffers</Input></To>
    </IncomingUpstream>
<!--
    Incoming loaded linked object events.
-->
    <IncomingUpstream>
      <Name>CBTF_PROTOCOL_TAG_LOADED_LINKED_OBJECT</Name>
      <To><Input>IncomingLoadedLinkedObject</Input></To>
    </IncomingUpstream>
<!--
    Incoming loaded linked object group events.
-->
    <IncomingUpstream>
      <Name>CBTF_PROTOCOL_TAG_LINKED_OBJECT_GROUP</Name>
      <To><Input>IncomingLinkedObjectGroup</Input></To>
    </IncomingUpstream>
<!--
    Incoming threads state changed events.
-->
    <IncomingUpstream>
      <Name>CBTF_PROTOCOL_TAG_THREADS_STATE_CHANGED</Name>
      <To><Input>IncomingThreadsStateChanged</Input></To>
    </IncomingUpstream>
<!--
    Incoming attached to threads events.
-->
    <IncomingUpstream>
      <Name>CBTF_PROTOCOL_TAG_ATTACHED_TO_THREADS</Name>
      <To><Input>IncomingAttachedToThreads</Input></To>
    </IncomingUpstream>
<!--
    Incoming created process events.
-->
    <IncomingUpstream>
      <Name>CBTF_PROTOCOL_TAG_CREATED_PROCESS</Name>
      <To><Input>IncomingCreatedProcess</Input></To>
    </IncomingUpstream>

<!--
    Frontend stream used to pass incoming perfromance data blobs
    on to the actual client to be recorded in a database or
    processed further by the client as desired.
-->
    <IncomingUpstream>
      <Name>CBTF_PROTOCOL_TAG_PERFORMANCE_DATA</Name>
      <To><Input>IncomingBlobs</Input></To>
    </IncomingUpstream>
 
  </Frontend>

<!--
   This filter is intended to run on the Leaf CP nodes only.
   It's primary purpose is to intercept incoming performance data
   blobs and aggregate pc addresses and their sample counts and
   send that aggregation upstream.
-->
  <Filter>
 
<!--
    Run this filter only on the CP's that are connected to a BE.
    In this case the BE's are lightweight.
-->
    <Depth>
	<LeafRelative>
	    <Offset>1</Offset>
	</LeafRelative>
    </Depth>

    <Network xmlns="http://www.krellinst.org/CBTF/Network">
      <Type>iot_Filter</Type>
      <Version>1.0.0</Version>

      <SearchPath>@@component_location@@</SearchPath>

      <Plugin>CollectionPlugin.so</Plugin>

<!--
     The AddressAggregator component.  The operations done in this filter
     are intended to run only at the leaf CP's in an mrnet tree.
-->

      <Component>
        <Name>Aggregator</Name>
        <Type>AddressAggregator</Type>
      </Component>

<!--
     Any cbtf_protocol_blob on this input will be decoded and processed
     for the aggregation of pc addresses and counts from the embedded
     data blob.  Each cbtf_protocol_blob contains a header blob which
     could be used later to match such pc address data to the thread
     encoded in the header (e.g. useful for maintaining which thread
     had the max,min counts for each address).
-->
      <Input>
        <Name>IncomingBlobs</Name>
        <To>
          <Name>Aggregator</Name>
          <Input>cbtf_protocol_blob</Input>
        </To>
      </Input>

<!--
     This ouput sends an AddressBuffer upstream. This buffer represents
     the unique pc addresses along with their counts from the performance
     data blobs received on the Aggregator  cbtf_protocol_blob input.
     Currently no attempt is made to match addressbuffers to the thread
     for which they are associated.
-->
      <Output>
        <Name>OutgoingBuffers</Name>
        <From>
          <Name>Aggregator</Name>
          <Output>Aggregatorout</Output>
        </From>
      </Output>

<!--
     This output sends xdr encoded perfomance data blobs to the frontend
     client where they are enqueued into a data queue for eventual
     writing to a database. No further processing on the actual performance
     data in the encoded blob will be performed in the filter network
     beyond this level of the reduction tree.
-->
      <Output>
        <Name>OutgoingBlobs</Name>
        <From>
          <Name>Aggregator</Name>
          <Output>datablob_xdr_out</Output>
        </From>
      </Output>
 
    </Network>    

<!--
    Incoming performance data blobs.  These are encoded as an xdr header
    and an actual xdr data blob.  For io, the xdr data blob is
    the actual sample payload sent from a collection service. 
-->
    <IncomingUpstream>
      <Name>CBTF_PROTOCOL_TAG_PERFORMANCE_DATA</Name>
      <To><Input>IncomingBlobs</Input></To>
    </IncomingUpstream>

<!--
    This is the stream for sending the aggregated pc addressbuffers
    upstream to the next level of the tree for further aggregation.
-->
    <OutgoingUpstream>
      <Name>Buffers</Name>
      <From><Output>OutgoingBuffers</Output></From>
    </OutgoingUpstream>

<!--
    Outgoing performance data blobs.  These are encoded as an xdr header
    and an actual xdr data blob.  For io, the xdr data blob is
    the actual sample payload sent from a collection service. 
    This stream essentially passes on the incoming blobs upstream
    where eventually a client can record them to a database if desired.
-->
    <OutgoingUpstream>
      <Name>CBTF_PROTOCOL_TAG_PERFORMANCE_DATA</Name>
      <From><Output>OutgoingBlobs</Output></From>
    </OutgoingUpstream>

  </Filter>

</MRNet>
