#! /bin/bash
# Some of this code is inspired by the libmonitor package (monitor-link).

debug_flag=0
if [ -z "$CBTF_DEBUG_CBTFLINK" ] ; then
  echo ""
else
  debug_flag=1
fi

cbtf_target=@cbtftargetos@

# TODO: handle the target prefix
cbtfk_prefix=@cbtfkCNdir@
cbtfk_libdir=@cbtfkCNlibdir@
cbtfk_bindir="${cbtfk_prefix}/bin"
cbtfk_plugins="${cbtfk_libdir}/KrellInstitute/Collectors"
cbtfk_plugins_static="${cbtfk_libdir}/KrellInstitute/Collectors/static"

libmonitor_libdir=@libmonitorlibdir@
libmonitor="${libmonitor_libdir}/libmonitor_wrap.a"

libunwind_libdir=@libunwindlibdir@
libunwind="${libunwind_libdir}/libunwind.a"

libpapi_libdir=@libpapilibdir@
libpapi="${libpapi_libdir}/libpapi.a"

libmrnet_libdir=@libmrnetCNlibdir@

# monitor always has these

# for the cray-xt5 we don't want system defined by default, not sure why
# but undefining it using the -u arguments does not work.
if test "${cbtf_target}" == "cray-xt5" || test "${cbtf_target}" == "cray-xt4" || test "${cbtf_target}" == "bgp"  ; then
  monitor_wrap_base_names="main exit _exit"
else
  monitor_wrap_base_names="main exit _exit system"
fi

# monitor has --enable-fork
monitor_wrap_fork_names="fork vfork execl execlp execle execv execvp execve"
# monitor has --enable-dlfcn
#monitor_wrap_dlopen_names="dlopen dlclose"
monitor_wrap_dlopen_names=""
# monitor has --enable-pthread
if test "${mach_type}" == "ppc64" && test "${cbtf_target}" == "bgq"  ; then
   monitor_wrap_pthread_names="pthread_create pthread_exit pthread_sigmask sigwaitinfo sigtimedwait"
elif test "${cbtf_target}" == "cray-xe" || test "${cbtf_target}" == "cray-xk"  || test "${cbtf_target}" == "cray" ; then
   monitor_wrap_pthread_names="pthread_create pthread_exit pthread_sigmask sigwaitinfo sigtimedwait"
else
   monitor_wrap_pthread_names="pthread_create pthread_exit pthread_sigmask"
fi

# monitor has --enable-signals
monitor_wrap_signal_names="signal sigaction sigprocmask"
# monitor has mpi. These are the base names for the non mpi collectors
monitor_wrap_mpibase_names="MPI_Init MPI_Init_thread MPI_Finalize MPI_Comm_rank mpi_init mpi_init_thread mpi_finalize mpi_comm_rank mpi_init_ mpi_init_thread_ mpi_finalize_ mpi_comm_rank_ mpi_init__ mpi_init_thread__ mpi_finalize__ mpi_comm_rank__"

# The following groupings are available
monitor_wrap_mpi_asyncP2P="MPI_Cancel mpi_cancel mpi_cancel_ mpi_cancel__ MPI_Ibsend mpi_ibsend mpi_ibsend_ mpi_ibsend__ MPI_Iprobe mpi_iprobe mpi_iprobe_ mpi_iprobe__ MPI_Irecv mpi_irecv mpi_irecv_ mpi_irecv__ MPI_Irsend mpi_irsend mpi_irsend_ mpi_irsend__ MPI_Isend mpi_isend mpi_isend_ mpi_isend__ MPI_Request_free mpi_request_free mpi_request_free_ mpi_request_free__ MPI_Test mpi_test mpi_test_ mpi_test__ MPI_Testall mpi_testall mpi_testall_ mpi_testall__ MPI_Testany mpi_testany mpi_testany_ mpi_testany__ MPI_Testsome mpi_testsome mpi_testsome_ mpi_testsome__ MPI_Wait mpi_wait mpi_wait_ mpi_wait__ MPI_Waitall mpi_waitall mpi_waitall_ mpi_waitall__ MPI_Waitany mpi_waitany mpi_waitany_ mpi_waitany__ MPI_Waitsome mpi_waitsome mpi_waitsome_ mpi_waitsome__"
monitor_wrap_mpi_collectives="MPI_Allgather mpi_allgather mpi_allgather_ mpi_allgather__ MPI_Allgatherv mpi_allgatherv mpi_allgatherv_ mpi_allgatherv_ MPI_Allreduce  mpi_allreduce mpi_allreduce_ mpi_allreduce__ MPI_Alltoall mpi_alltoall mpi_alltoall_ mpi_alltoall__ MPI_Alltoallv mpi_alltoallv mpi_alltoallv_ mpi_alltoallv__ MPI_Barrier mpi_barrier mpi_barrier_ mpi_barrier__ MPI_Bcast mpi_bcast mpi_bcast_ mpi_bcast__ MPI_Gather mpi_gather mpi_gather_ mpi_gather__ MPI_Gatherv mpi_gatherv mpi_gatherv_ mpi_gatherv__ MPI_Reduce mpi_reduce mpi_reduce_ mpi_reduce__ MPI_Reduce_scatter mpi_reduce_scatter mpi_reduce_scatter_ mpi_reduce_scatter__ MPI_Scan mpi_scan mpi_scan_ mpi_scan__ MPI_Scatter mpi_scatter mpi_scatter_ mpi_scatter__ MPI_Scatterv mpi_scatterv mpi_scatterv_ mpi_scatterv__"
monitor_wrap_mpi_datatypes="MPI_Pack mpi_pack mpi_pack_ mpi_pack__ MPI_Unpack mpi_unpack mpi_unpack_ mpi_unpack__"
monitor_wrap_mpi_environment="MPI_Finalize mpi_finalize mpi_finalize_ mpi_finalize__ MPI_Init mpi_init mpi_init_ mpi_init__"
monitor_wrap_mpi_graphcontexts="MPI_Comm_create mpi_comm_create mpi_comm_create_ mpi_comm_create__ MPI_Comm_dup mpi_comm_dup mpi_comm_dup_ mpi_comm_dup__ MPI_Comm_free mpi_comm_free mpi_comm_free_ mpi_comm_free__ MPI_Comm_split mpi_comm_split mpi_comm_split_ mpi_comm_split__ MPI_Intercomm_create mpi_intercomm_create mpi_intercomm_create_ mpi_intercomm_create__ MPI_Intercomm_merge mpi_intercomm_merge mpi_intercomm_merge_ mpi_intercomm_merge__"
monitor_wrap_mpi_persistent="MPI_Bsend_init mpi_bsend_init mpi_bsend_init_ mpi_bsend_init__ MPI_Recv_init mpi_recv_init mpi_recv_init_ mpi_recv_init__ MPI_Rsend_init mpi_rsend_init mpi_rsend_init_ mpi_rsend_init__ MPI_Send_init mpi_send_init mpi_send_init_ mpi_send_init__ MPI_Ssend_init mpi_ssend_init mpi_ssend_init_ mpi_ssend_init__ MPI_Start mpi_start mpi_start_ mpi_start__ MPI_Startall mpi_startall mpi_startall_ mpi_startall__"
monitor_wrap_mpi_processtopologies="MPI_Cart_create MPI_Cart_sub MPI_Graph_create"
monitor_wrap_mpi_syncP2P="MPI_Bsend mpi_bsend mpi_bsend_ mpi_bsend__ MPI_Get_count mpi_get_count mpi_get_count_ mpi_get_count__ MPI_Probe mpi_probe mpi_probe_ mpi_probe__  MPI_Recv mpi_recv mpi_recv_ mpi_recv__ MPI_Rsend mpi_rsend mpi_rsend_ mpi_rsend__ MPI_Send mpi_send mpi_send_ mpi_send__ MPI_Sendrecv mpi_sendrecv mpi_sendrecv_ mpi_sendrecv__ MPI_Sendrecv_replace mpi_sendrecv_replace mpi_sendrecv_replace_ mpi_sendrecv_replace__ MPI_Ssend mpi_ssend mpi_ssend_ mpi_ssend__"

# The default for mpi collectors.
monitor_wrap_mpi_all="${monitor_wrap_mpi_asyncP2P} ${monitor_wrap_mpi_collectives} ${monitor_wrap_mpi_datatypes} ${monitor_wrap_mpi_graphcontexts} ${monitor_wrap_mpi_persistent} ${monitor_wrap_mpi_processtopologies} ${monitor_wrap_mpi_syncP2P}"

monitor_wrap_io_names="close creat creat64 dup dup2 lseek lseek64 open open64 pipe pread pread64 pwrite pwrite64 read readv write writev"

monitor_wrap_mem_names="malloc free memalign posix_memalign calloc realloc"

# inititalize variables used to create final link line
mpi_undefines=
fork_undefines=
pthread_undefines=
static_collector=
mpi_plugin=
output_dir=
insert_files=

default_mpi_impl=@default_mpi_impl@

if [ -n "$CBTF_MPI_IMPLEMENTATION" ] ; then
    mpitouse=$CBTF_MPI_IMPLEMENTATION
else
    mpitouse=`echo ${default_mpi_impl} |tr '[A-Z]' '[a-z]'`
    export CBTF_MPI_IMPLEMENTATION=$mpitouse
fi


# Space-separated list of extra symbol names to wrap.
wrap_names=

# Space-separated list of symbol names to force undefined.
undef_names=

# Space-separated list of extra library names, eg: "-ldl -lm".
library_names=

die()
{
    echo "$0: error: $*" 1>&2
    exit 1
}

usage()
{
    cat <<EOF
Usage: $0 -c collector [options] compiler file ...

  -h, --help

  -c, --collector  <collector name>
Where collector is the name of the OpenSpeedShop
collector to link into the application. See the
cbtf manpage for a description of the available
experiments provided by OpenSpeedShop. This is a
mandatory option.

  -m, --mode  <fileio, sequential, mpi>
where:
 mpi: sends data from an mpi application using MRNet.
 sequential: sends data from a sequential application using MRNet. (default)

The mrnet modes are preferred and the resulting application
must be run with a client tool that supports mrnet backend
attach methods.  The cbtf collectionTool client is one such client.
This is a mandatory option. 

  -v, --verbose

EOF
    exit 0
}

verbose=no
# Default to sequential mode (--mode will override this)
cbtflinkMode="sequential"

while test "x$1" != x ; do
    case "$1" in

        -h | --help )
            usage
            ;;

        -c | --collector)
            test "x$2" != x || die "missing argument: $*"
            case "$2" in
                pcsamp )        collector="$2" ;;
                hwc )           collector="$2" ;;
                usertime )      collector="$2" ;;
                hwctime )       collector="$2" ;;
                hwcsamp )       collector="$2" ;;
                io )            collector="$2" ;;
                iop )           collector="$2" ;;
                iot )           collector="$2" ;;
                mem )           collector="$2" ;;
                mpi )           collector="$2" ;;
                mpit )          collector="$2" ;;
                mpip )          collector="$2" ;;
                pthreads )      collector="$2" ;;
                fpe )           collector="$2" ;;
            esac
            shift ; shift
            ;;

        -i | --mpitype)
            test "x$2" != x || die "missing argument: $*"
            case "$2" in
                mpich )        mpitouse="$2" ;;
                mpich2 )        mpitouse="$2" ;;
                mvapich )        mpitouse="$2" ;;
                mvapich2 )        mpitouse="$2" ;;
                openmpi )        mpitouse="$2" ;;
                mpt )        mpitouse="$2" ;;
                lam )        mpitouse="$2" ;;
                lampi )        mpitouse="$2" ;;
            esac
	    export CBTF_MPI_IMPLEMENTATION=$mpitouse
            shift ; shift
            ;;
        -m | --mode)
            test "x$2" != x || die "missing argument: $*"
            case "$2" in
                fileio )      cbtflinkMode="$2" ;;
                mpi )         cbtflinkMode="$2" ;;
                sequential )  cbtflinkMode="$2" ;;
            esac
            shift ; shift
            ;;

        -p | --pluginpath)
            test "x$2" != x || die "missing argument: $*"
            case "$2" in
                /* )  dir="$2" ;;
                * )   dir="`pwd`/$2" ;;
            esac
            test -d "$dir" || die "unable to find: $dir"
            export CBTF_PLUGIN_PATH="${dir}"
	    cbtfk_plugins="${dir}"
	    cbtfk_plugins_static="${dir}/static"
            shift ; shift
            ;;


        -v | --verbose )
            verbose=yes
            shift
            ;;

        -u | --undefined )
            test "x$2" != x || die "missing argument: $*"
            undef_names="${undef_names} $2"
            shift ; shift
            ;;

        -w | --wrap )
            test "x$2" != x || die "missing argument: $*"
            wrap_names="${wrap_names} $2"
            shift ; shift
            ;;

        -- )
            shift
            break
            ;;

        -* )
            die "unknown option: $1"
            ;;

        * )
            break
            ;;
    esac
done

# services to link with
# TODO: maybe do the same for the required message libs for
# mrnet based collectors.
data_service=${cbtfk_libdir}/libcbtf-services-data.a
common_service=${cbtfk_libdir}/libcbtf-services-common.a
monitor_service=${cbtfk_libdir}/libcbtf-services-offline.a
mrnet_service=${cbtfk_libdir}/libcbtf-services-mrnet.a
offline_service=${cbtfk_libdir}/libcbtf-services-offline.a
papi_service=${cbtfk_libdir}/libcbtf-services-papi.a
timer_service=${cbtfk_libdir}/libcbtf-services-timer.a
unwind_service=${cbtfk_libdir}/libcbtf-services-unwind.a
monitor_callbacks=${cbtfk_plugins}/cbtf_monitor.o

#
# Must have a compiler command and at least one argument.
#
test "x$2" != x || usage
command="$1"
shift

#
# Duplicate the -l<lib> arguments.
#
appl_libs=
for lib in "$@" ; do
    case "$lib" in
        -l?* ) appl_libs="$appl_libs $lib" ;;
    esac
done

monitor_has_fork=`nm ${libmonitor} | grep -i __wrap_fork`
monitor_has_signals=`nm ${libmonitor} | grep -i __wrap_signal`
monitor_has_pthreads=`nm ${libmonitor} | grep -i __wrap_pthread_create`
monitor_has_dlopen=`nm ${libmonitor} | grep -i __wrap_dlopen`
monitor_has_mpi=`nm ${libmonitor} | grep -i __wrap_mpi_init`

if [ $debug_flag == 1 ] ; then
  echo
  if [ -n "$monitor_has_fork" ] ; then
    echo "DEBUG: cbtflink monitor_has_fork is non-null"
  fi
  if [ -n "$monitor_has_signals" ] ; then
    echo "DEBUG: cbtflink monitor_has_signals is non-null"
  fi
  if [ -n "$monitor_has_pthreads" ] ; then
    echo "DEBUG: cbtflink monitor_has_pthreads is non-null"
  fi
  if [ -n "$monitor_has_dlopen" ] ; then
    echo "DEBUG: cbtflink monitor_has_dlopen is non-null"
  fi
  if [ -n "$monitor_has_mpi" ] ; then
    echo "DEBUG: cbtflink monitor_has_mpi = $monitor_has_mpi"
  fi
  echo
fi

collector_service_libs=""
pthread_libs=""
ldl_libs=""
libm_libs="-lm"

# A command with *mpix* implies IBM compilers on BlueGene.
# The -Wl,--eh-frame-hdr option is is required so that libunwind can find
# the information generated by the compiler required for stack unwinding
# in static binaries. 
if [[ $command == *mpix* ]] ; then
  static_args="  "
else
  static_args=" -static -Wl,--eh-frame-hdr "
fi

if [ $debug_flag == 1 ] ; then
  echo
  echo "DEBUG: cbtflink static_args = $static_args"
fi

wrap_args=
for name in $monitor_wrap_base_names $wrap_names ;  do
    wrap_args="${wrap_args} -Wl,--wrap,${name}"
done

if [ $debug_flag == 1 ] ; then
  echo
  echo "DEBUG: cbtflink wrap_args for monitor_wrap_base_names = $wrap_args"
fi

if [ -n "$monitor_has_fork" ] ; then
    for name in $monitor_wrap_fork_names ; do
	wrap_args="${wrap_args} -Wl,--wrap,${name}"
    done
fi

if [ $debug_flag == 1 ] ; then
  echo
  echo "DEBUG: cbtflink wrap_args for monitor_wrap_fork_names = $wrap_args"
fi

if [ -n "$monitor_has_signals" ] ; then
    for name in $monitor_wrap_signal_names ; do
	wrap_args="${wrap_args} -Wl,--wrap,${name}"
    done
fi

if [ $debug_flag == 1 ] ; then
  echo
  echo "DEBUG: cbtflink wrap_args for monitor_wrap_signal_names = $wrap_args"
fi

if [ -n "$monitor_has_pthreads" ] ; then
    for name in $monitor_wrap_pthread_names ; do
	wrap_args="${wrap_args} -Wl,--wrap,${name}"
    done
    pthreads_libs="-lpthread"
fi

if [ $debug_flag == 1 ] ; then
  echo
  echo "DEBUG: cbtflink wrap_args for monitor_wrap_pthread_names = $wrap_args"
fi

if [ -n "$monitor_has_dlopen" ] ; then
    for name in $monitor_wrap_dlopen_names ; do
	wrap_args="${wrap_args} -Wl,--wrap,${name}"
    done
    ldl_libs="-Wl,--no-as-needed -ldl"
fi

if [ $debug_flag == 1 ] ; then
  echo
  echo "DEBUG: cbtflink wrap_args for monitor_wrap_dlopen_names = $wrap_args"
  echo "DEBUG: cbtflink collector_service_libs for monitor_wrap_dlopen_names = $collector_service_libs"
fi

if [ -n "$monitor_has_mpi" ] ; then
    for name in $monitor_wrap_mpibase_names ; do
	wrap_args="${wrap_args} -Wl,--wrap,${name}"
    done
fi

if [ $debug_flag == 1 ] ; then
  echo
  echo "DEBUG: cbtflink wrap_args for monitor_wrap_mpibase_names = $wrap_args"
fi

undef_args=
for name in $undef_names ; do
    undef_args="${undef_args} -Wl,-u,__wrap_${name}"
done

for name in $mpi_undefines ; do
    undef_args="${undef_args} -Wl,-u,__wrap_${name}"
    echo
done

for name in $fork_undefines ; do
    undef_args="${undef_args} -Wl,-u,__wrap_${name}"
done

for name in $pthread_undefines ; do
    undef_args="${undef_args} -Wl,-u,__wrap_${name}"
done


if [ $debug_flag == 1 ] ; then
  echo
  echo "DEBUG: cbtflink cbtf_target = $cbtf_target"
fi


# Need to undefine fork and others for cray and blue gene systems
if test "${cbtf_target}" != "" ; then
    if test "${cbtf_target}" == "cray-xk" || test "${cbtf_target}" == "cray-xe" || test "${cbtf_target}" == "cray-xt4" || test "${cbtf_target}" == "cray" ; then
       undef_args="${undef_args} -Wl,-u,__wrap_fork"
       undef_args="${undef_args} -Wl,-u,__wrap_pthread_create"
    elif test "${cbtf_target}" == "cray-xt5" ; then
       # Need to undefine system for cray-xt5
       undef_args="${undef_args} -Wl,-u,__wrap_pthread_create"
    elif test "${cbtf_target}" == "bgl" || test "${cbtf_target}" == "bgp" || test "${cbtf_target}" == "bgq" ; then
       # Need to undefine fork for bgl
       undef_args="${undef_args} -Wl,-u,__wrap_pthread_create"
       undef_args="${undef_args} -Wl,-u,__wrap_open"
    fi
fi

if [ $debug_flag == 1 ] ; then
  echo
  echo "DEBUG: cbtflink collector = $collector"
fi

#
# order of linking is important. See the exec command at the end of
# this script to infor the ordering as implemented.
#

# monitor callbacks and libraries
mon_args="${libmonitor} ${appl_libs} ${library_names}"
# mrnet service and libraries
mrnet_service_libs="$mrnet_service -L ${libmrnet_libdir} -lmrnet_lightweight_r -lxplat_lightweight_r"
# cbtf message libraries
message_libs="-L${cbtfk_libdir} -lcbtf-messages-events -lcbtf-messages-perfdata -lcbtf-messages-base -lcbtf-messages-collector"
# common collector service libraries
common_service_libs="$data_service $common_service $offline_service"
# the unwind service and libunwind
unwind_service_libs="${unwind_service} ${libunwind}"
# the papi service and libpapi.a
papi_service_libs="${papi_service} ${libpapi}"
# these are common to all link steps.  the libm libs are needed for mrnet collectors.
common_libs="-lrt ${pthreads_libs} ${ldl_libs} ${libm_libs}"

# create the extensions for the unique collector types.
# and create common collection libs for each type
collector_type=""
case "$cbtflinkMode" in
    fileio )
	collector_type="monitor-fileio"
	libm_libs=""
	collector_service_libs="${cbtfk_libdir}/libcbtf-services-collector-${collector_type}.a"
	;;
    mpi )
	collector_type="monitor-mrnet-mpi"
	collector_service_libs="${cbtfk_libdir}/libcbtf-services-collector-${collector_type}.a $mrnet_service_libs"
	;;
    sequential )
	collector_type="monitor-mrnet"
	collector_service_libs="${cbtfk_libdir}/libcbtf-services-collector-${collector_type}.a $mrnet_service_libs"
	;;
esac

# mpi collectors need to add the specific mpi implementation to the collector.
case "$collector" in
    mpi*|mpit*|mpip*|mpiotf* )
        static_collector=${cbtfk_plugins_static}/lib${collector}-${mpitouse}-${collector_type}.a
    ;;
    *)
        static_collector=${cbtfk_plugins_static}/lib${collector}-${collector_type}.a
    ;;
esac

# create a blank linking command
link_command=""
collector_specific_libs=""
prelink_command="$command $static_args $wrap_args $undef_args"
collector_final_libs="${message_libs} ${common_libs}"
collector_libs="$monitor_callbacks $collector_service_libs $static_collector ${common_service_libs}"

# now construct the link command for each collector.
case "$collector" in
    mpi*|mpit*|mpip*|mpiotf* )
    if [ -n "$monitor_has_mpi" ] ; then
	for name in $monitor_wrap_mpi_all ; do
	    wrap_args="${wrap_args} -Wl,--wrap,${name}"
	done
    fi
    prelink_command="$command $static_args $wrap_args $undef_args"
    collector_specific_libs="${unwind_service_libs}"
    ;;

    # The non mpi tracing experiments need to trace MPI_Init to
    # gather the mpi rank information needed for the mpi_rank field
    # in the THREADS table of the cbtf database.
    pcsamp)
    collector_specific_libs="${timer_service}"
    ;;

    usertime)
    collector_specific_libs="${timer_service} ${unwind_service_libs}"
    ;;

    hwc)
    collector_specific_libs="${papi_service_libs}"
    ;;

    hwctime)
    collector_specific_libs="${papi_service_libs} ${unwind_service_libs}"
    ;;

    hwcsamp)
    collector_specific_libs="${timer_service} ${papi_service_libs}"
    ;;

    io | iop | iot)
    for name in $monitor_wrap_io_names ; do
	wrap_args="${wrap_args} -Wl,--wrap,${name}"
    done

    # Need to undefine open for io and iot for cray-xt4
    if test "${cbtf_target}" == "cray-xt4" ; then
       undef_args="${undef_args} -Wl,-u,__wrap_open"
    fi

    # Need to undefine open for io and iot for cray-xt5
    if test "${cbtf_target}" == "cray-xt5" ; then
       undef_args="${undef_args} -Wl,-u,__wrap_open"
    fi
    prelink_command="$command $static_args $wrap_args $undef_args"
    collector_specific_libs="${unwind_service_libs}"
    ;;

    mem )
    for name in $monitor_wrap_mem_names ; do
	wrap_args="${wrap_args} -Wl,--wrap,${name}"
    done
    prelink_command="$command $static_args $wrap_args $undef_args"
    collector_specific_libs="${unwind_service_libs}"

    ;;

    pthreads )
    # TODO: placeholder for pthreads static linking.
    ;;

    fpe )
    # NOT SUPPORTED.  Maybe in the future for fileio.
    #collector_service_libs="${collector_service_libs} -lrt -L ${cbtfk_libdir} -lcbtf-services-unwind -lcbtf-services-binutils -lcbtf-services-monitor -L ${libunwind_libdir} -lunwind -lbfd -liberty -lopcodes -lz -lm"
    # collector_specific_libs="${unwind_service_libs}"
    ;;
esac

if test "$verbose" = yes ; then
    echo "$0, new command line: $prelink_command \$@  $collector_libs $collector_specific_libs $collector_final_libs $mon_args"
fi

# execute the final linking.
exec $prelink_command "$@" $collector_libs $collector_specific_libs $collector_final_libs $mon_args



