#! /bin/bash
# Some of this code is inspired by the libmonitor package (monitor-run).

# The machine dependent abi libdir name has been computed 
# so use the information from one central location. 
machlibdir=@machine_dependent_libdir@
altmachlibdir=@alt_machine_dependent_libdir@

monitor_libdir=@libmonitorlibdir@
libmonitor="${monitor_libdir}/libmonitor.so"

papi_libdir=@libpapilibdir@
libpapi="${papi_libdir}/libpapi.so"
libpfm="${papi_libdir}/libpfm.so"

libunwind_libdir=@libunwindlibdir@
libunwind="${libunwind_libdir}/libunwind.so"

## testing for libiomp alone is likely not enough.  We need
## a libiomp with ompt api support.  Maybe add test for ompt.h
## in addition to libiomp5.so to be certain. Of course the
## existance of the ompt_service so below would likely ensure that
## at least when the ctf-krell services where built ompt.h
## was found.  But checking at runtime may be safest.
libiomp_prefix=@libiompdir@
libiomp_libdir=
libiomp=
use_ompt="false"
if test -f ${libiomp_prefix}/${machlibdir}/libiomp5.so; then
  use_ompt="true"
  libiomp_libdir="${libiomp_prefix}/${machlibdir}"
  libiomp="${libiomp_prefix}/${machlibdir}/libiomp5.so"
elif test -f ${libiomp_prefix}/${altmachlibdir}/libiomp5.so; then
  use_ompt="true"
  libiomp_libdir="${libiomp_prefix}/${altmachlibdir}"
  libiomp="${libiomp_prefix}/${altmachlibdir}/libiomp5.so"
fi

libmrnet_libdir=@libmrnetCNlibdir@
libmrnet="${libmrnet_libdir}/libmrnet_lightweight.so"
libxplat="${libmrnet_libdir}/libxplat_lightweight.so"


cbtfk_prefix=@cbtfkCNdir@
cbtfk_libdir=@cbtfkCNlibdir@
cbtfk_bindir="${cbtfk_prefix}/bin"
cbtfk_plugins="${cbtfk_libdir}/KrellInstitute/Collectors"

binutils_service="${cbtfk_libdir}/libcbtf-services-binutils.so"
common_service="${cbtfk_libdir}/libcbtf-services-common.so"
data_service="${cbtfk_libdir}/libcbtf-services-data.so"
events_service="${cbtfk_libdir}/libcbtf-messages-events.so"
fileio_service="${cbtfk_libdir}/libcbtf-services-fileio.so"
fpe_service="${cbtfk_libdir}/libcbtf-services-fpe.so"
monitor_service="${cbtfk_libdir}/libcbtf-services-monitor.so"
mrnet_service="${cbtfk_libdir}/libcbtf-services-mrnet.so"
papi_service="${cbtfk_libdir}/libcbtf-services-papi.so"
send_service="${cbtfk_libdir}/libcbtf-services-send.so"
timer_service="${cbtfk_libdir}/libcbtf-services-timer.so"
unwind_service="${cbtfk_libdir}/libcbtf-services-unwind.so"

# For target fe mode of operation
offline_service="${cbtfk_libdir}/libcbtf-services-offline.so"
base_service="${cbtfk_libdir}/libcbtf-messages-base.so"
perfdata_service="${cbtfk_libdir}/libcbtf-messages-perfdata.so"
collector_mon_mrnet_mpi_service="${cbtfk_libdir}/libcbtf-services-collector-monitor-mrnet-mpi.so"
collector_mon_mrnet_service="${cbtfk_libdir}/libcbtf-services-collector-monitor-mrnet.so"
collector_mon_fileio_service="${cbtfk_libdir}/libcbtf-services-collector-monitor-fileio.so"
libxplat_r="${libmrnet_libdir}/libxplat_lightweight_r.so"
libmrnet_r="${libmrnet_libdir}/libmrnet_lightweight_r.so"


lam_prefix=@lamdir@
lampi_prefix=@lampidir@
mpich_prefix=@mpichdir@
mpich2_prefix=@mpich2dir@
mvapich_prefix=@mvapichdir@
mvapich2_prefix=@mvapich2dir@
mpt_prefix=@mptdir@
openmpi_prefix=@openmpidir@

if test -f ${mpich2_prefix}/${machlibdir}/libfmpich.so; then
  f_mpich2_libs="${mpich2_prefix}/${machlibdir}/libfmpich.so"
elif test -f ${mpich2_prefix}/${altmachlibdir}/libfmpich.so; then
  f_mpich2_libs="${mpich2_prefix}/${altmachlibdir}/libfmpich.so"
fi

if test -f ${mvapich2_prefix}/${machlibdir}/libfmpich.so; then
  f_mvapich2_libs="${mvapich2_prefix}/${machlibdir}/libfmpich.so"
elif test -f ${mvapich2_prefix}/${altmachlibdir}/libfmpich.so; then
  f_mvapich2_libs="${mvapich2_prefix}/${altmachlibdir}/libfmpich.so"
fi

output_dir=

default_mpi_impl=@cbtfdefaultmpi@

if [ -n "$CBTF_MPI_IMPLEMENTATION" ]
then
    mpitouse=$CBTF_MPI_IMPLEMENTATION
else
    mpitouse=`echo ${default_mpi_impl} |tr '[A-Z]' '[a-z]'`
    export CBTF_MPI_IMPLEMENTATION=$mpitouse
fi


die()
{
    echo "$0: error: $*" 1>&2
    exit 1
}

usage()
{
    cat <<EOF
Usage: $0 [options] command arg ...

Note: typically this command is never issued by the user.
The user should run cbtf collection via the collectionTool client
or OpenSpeedShops osscollect client (or via oss convenience scripts).

If command uses arguments then command and arg
must be quoted. example:
$0 "mpirun -np 2 foo"

   -h, --help

   -c, --collector
Where collector name is an available collector: (pcsamp)

   -d, --debug
enable debugging

   -m, --mrnet
Use mrnet to send data.

   --mpi
Use mpi version of collector. This lightweight mrnet backends
need this to properly connect to the mrnet tree for mpi programs.

   -i, --fileio
Save data to files.

   --openmp
Use this if the executable is linked with an openmp library

   -o, --output  <directory>
Where directory is the location to write the
raw performance data files. The utility tool
${cbtfk_bindir}/cbtfutil is then run with the
named directory as an argument to create a .openss
database that can be view with openss. On large
cluster systems this should be set to fast file
system capable of storing large datasets. 
NOTE: this option will override any setting for
the environment variable CBTF_RAWDATA_DIR.
Only valid with fileio.

EOF
    exit 0
}

use_mrnet="true"
use_fileo="false"
use_mpi="false"
has_openmp="false"

while test "x$1" != x
do
    case "$1" in

        -h | --help )
            usage
            ;;

	-c | --collector)
	    test "x$2" != x || die "missing argument: $*"
	    collector=$2
	    shift ; shift;
	    ;;

        -d | --debug )
            export MONITOR_DEBUG=1
            export CBTF_DEBUG_COLLECTOR=1
            export CBTF_DEBUG_OFLINE_COLLECTOR=1
	    shift
            ;;

        -i | --fileio )
            use_fileio="true";
            use_mrnet="false";
	    shift
            ;;

        -m | --mrnet )
            use_mrnet="true";
            use_fileio="false";
	    shift
            ;;

        --mpi )
            use_mpi="true";
	    shift
            ;;

        --openmp )
            has_openmp="true";
	    shift
            ;;

	-o | --output)
            test "x$2" != x || die "missing argument: $*"
            case "$2" in
                /* )  dir="$2" ;;
		* )   dir="`pwd`/$2" ;;
            esac
	    test -d "$dir" || die "unable to find: $dir"
	    export CBTF_RAWDATA_DIR="${dir}"
            shift ; shift
            ;;

        -- )
            shift
            break
            ;;

        -* )
            die "unknown option: $1"
            ;;

        * )
            break
            ;;
    esac
done

## Currently the ompt service is strictly intel based.
## has_openmp can be true if the users program was linked with libgomp.
## Only allow ompt_service IFF we have libiomp, the ompt service exists
## and we were passed the --openmp flag signifying the executalbe is an
## openmp program.
## We also will add libiomp before the service to ld_preload.  That way
## our libiomp with ompt support will be used rather then say libgomp.
## TODO: verify that that we can avoid ld_preload of libiomp on power8
## if the ompt api is available by default on that system.
ompt_service=
if [ "$has_openmp" == "true" ] ; then
  if [ "$use_ompt" == "true" ] ; then
    if test -f ${cbtfk_libdir}/libcbtf-services-ompt.so ; then
      ompt_service="${cbtfk_libdir}/libcbtf-services-ompt.so:${libiomp}"
    fi
  fi
fi


extra_mpi_libs=""


case "$mpitouse" in
    mpich2)
      extra_mpi_libs=${f_mpich2_libs}
    ;;

    mvapich2)
      extra_mpi_libs=${f_mvapich2_libs}
esac

# 

case "$collector" in
    # mpi collection always uses mpi;)
    mpi|mpit|mpip)
    collector=${collector}-${mpitouse}
    if [ $use_mrnet == "true" ]
    then
        if [ $use_mpi == "true" ]
	then
	    export LD_PRELOAD=${monitor_service}:${unwind_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_mpi_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet-mpi.so:${extra_mpi_libs}:${libmonitor}
	fi 
    elif [ $use_fileio == "true" ]
    then
	    export LD_PRELOAD=${monitor_service}:${unwind_service}:${fileio_service}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${send_service}:${collector_mon_fileio_service}:${cbtfk_plugins}/$collector-collector-monitor-fileio.so:${extra_mpi_libs}:${libmonitor}
    fi
    ;;

    pcsamp)
    if [ $use_mrnet == "true" ]
    then
        if [ $use_mpi == "true" ]
	then
	    export LD_PRELOAD=${monitor_service}:${ompt_service}:${timer_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_mpi_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet-mpi.so:${libmonitor}
	else
	    export LD_PRELOAD=${monitor_service}:${ompt_service}:${timer_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet.so:${libmonitor}
	fi 
    elif [ $use_fileio == "true" ]
    then
      export LD_PRELOAD=${monitor_service}:${ompt_service}:${timer_service}:${fileio_service}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${send_service}:${collector_mon_fileio_service}:${cbtfk_plugins}/$collector-collector-monitor-fileio.so:${libmonitor}
    fi
    ;;

    usertime)
    if [ $use_mrnet == "true" ]
    then
        if [ $use_mpi == "true" ]
	then
	    export LD_PRELOAD=${monitor_service}:${ompt_service}:${timer_service}:${unwind_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_mpi_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet-mpi.so:${libmonitor}:${libunwind}
	else
	    export LD_PRELOAD=${monitor_service}:${ompt_service}:${timer_service}:${unwind_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet.so:${libmonitor}:${libunwind}
	fi 
    elif [ $use_fileio == "true" ]
    then
      export LD_PRELOAD=${monitor_service}:${ompt_service}:${timer_service}:${unwind_service}:${fileio_service}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${send_service}:${collector_mon_fileio_service}:${cbtfk_plugins}/$collector-collector-monitor-fileio.so:${libmonitor}:${libunwind}
    fi
    ;;

    io|iop|iot)
    if [ $use_mrnet == "true" ]
    then
        if [ $use_mpi == "true" ]
	then
	    export LD_PRELOAD=${monitor_service}:${unwind_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_mpi_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet-mpi.so:${libmonitor}:${libunwind}
	else
	    export LD_PRELOAD=${monitor_service}:${unwind_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet.so:${libmonitor}:${libunwind}
	fi 
    elif [ $use_fileio == "true" ]
    then
      export LD_PRELOAD=${monitor_service}:${unwind_service}:${fileio_service}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${send_service}:${collector_mon_fileio_service}:${cbtfk_plugins}/$collector-collector-monitor-fileio.so:${libmonitor}:${libunwind}
    fi
    ;;

    mem)
    if [ $use_mrnet == "true" ]
    then
        if [ $use_mpi == "true" ]
	then
	    export LD_PRELOAD=${monitor_service}:${unwind_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_mpi_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet-mpi.so:${libmonitor}:${libunwind}
	else
	    export LD_PRELOAD=${monitor_service}:${unwind_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet.so:${libmonitor}:${libunwind}
	fi 
    elif [ $use_fileio == "true" ]
    then
      export LD_PRELOAD=${monitor_service}:${unwind_service}:${fileio_service}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${send_service}:${collector_mon_fileio_service}:${cbtfk_plugins}/$collector-collector-monitor-fileio.so:${libmonitor}:${libunwind}
    fi
    ;;

    pthreads)
    if [ $use_mrnet == "true" ]
    then
        if [ $use_mpi == "true" ]
	then
	    export LD_PRELOAD=${monitor_service}:${unwind_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_mpi_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet-mpi.so:${libmonitor}:${libunwind}
	else
	    export LD_PRELOAD=${monitor_service}:${unwind_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet.so:${libmonitor}:${libunwind}
	fi 
    elif [ $use_fileio == "true" ]
    then
      export LD_PRELOAD=${monitor_service}:${unwind_service}:${fileio_service}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${send_service}:${collector_mon_fileio_service}:${cbtfk_plugins}/$collector-collector-monitor-fileio.so:${libmonitor}:${libunwind}
    fi
    ;;

    hwc|hwcsamp)
    if [ $use_mrnet == "true" ]
    then
        if [ $use_mpi == "true" ]
	then
	    export LD_PRELOAD=${monitor_service}:${ompt_service}:${timer_service}:${papi_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_mpi_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet-mpi.so:${libmonitor}:${libpapi}:${libpfm}
	else
	    export LD_PRELOAD=${monitor_service}:${ompt_service}:${timer_service}:${papi_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet.so:${libmonitor}:${libpapi}:${libpfm}
	fi 
    elif [ $use_fileio == "true" ]
    then
      export LD_PRELOAD=${monitor_service}:${ompt_service}:${timer_service}:${papi_service}:${fileio_service}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${send_service}:${collector_mon_fileio_service}:${cbtfk_plugins}/$collector-collector-monitor-fileio.so:${libmonitor}:${libpapi}:${libpfm}
    fi
    ;;

    hwctime)
    if [ $use_mrnet == "true" ]
    then
        if [ $use_mpi == "true" ]
	then
	    export LD_PRELOAD=${monitor_service}:${ompt_service}:${papi_service}:${unwind_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_mpi_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet-mpi.so:${libmonitor}:${libunwind}:${libpapi}:${libpfm}
	else
	    export LD_PRELOAD=${monitor_service}:${ompt_service}:${papi_service}:${unwind_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_service}:${cbtfk_plugins}/$collector-collector-monitor-mrnet.so:${libmonitor}:${libunwind}:${libpapi}:${libpfm}
	fi 
    elif [ $use_fileio == "true" ]
    then
      export LD_PRELOAD=${monitor_service}:${ompt_service}:${papi_service}:${unwind_service}:${fileio_service}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${send_service}:${collector_mon_fileio_service}:${cbtfk_plugins}/$collector-collector-monitor-fileio.so:${libmonitor}:${libunwind}:${libpapi}:${libpfm}
    fi
    ;;

    cuda|cudadump|cudaio)
        if [ $use_mrnet == "true" ]
        then
            if [ $use_mpi == "true" ]
	        then
                export LD_PRELOAD=${monitor_service}:${papi_service}:${unwind_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_mpi_service}:${cbtfk_plugins}/cuda-collector-monitor-mrnet-mpi.so:${libmonitor}:${libunwind}
	        else
                export LD_PRELOAD=${monitor_service}:${papi_service}:${unwind_service}:${mrnet_service}:${libmrnet_r}:${libxplat_r}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${collector_mon_mrnet_service}:${cbtfk_plugins}/cuda-collector-monitor-mrnet.so:${libmonitor}:${libunwind}
	        fi 
        elif [ $use_fileio == "true" ]
        then
            export LD_PRELOAD=${monitor_service}:${papi_service}:${unwind_service}:${fileio_service}:${events_service}:${data_service}:${common_service}:${offline_service}:${base_service}:${perfdata_service}:${send_service}:${collector_mon_fileio_service}:${cbtfk_plugins}/cuda-collector-monitor-fileio.so:${libmonitor}:${libunwind}
        fi
        ;;
    
    # The non mpi tracing experiments need to trace MPI_Init to
    # gather the mpi rank information needed for the mpi_rank field
    # in the THREADS table of the openss database.
    * )
    export LD_PRELOAD=${cbtfk_plugins}/$collector-rt-offline.so:${libmonitor}
    ;;
esac

exec $@
