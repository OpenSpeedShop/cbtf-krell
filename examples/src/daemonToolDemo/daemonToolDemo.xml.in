<?xml version="1.0" encoding="utf-8"?>

<!--
Copyright (c) 2011-2015 Krell Institute. All Rights Reserved.
    
This library is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2.1 of the License, or (at your option)
any later version.
    
This library is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
details.
    
You should have received a copy of the GNU Lesser General Public License
along with this library; if not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<MRNet xmlns="http://www.krellinst.org/CBTF/MRNet.xsd">

  <!--
     Every CBTF distributed (via MRNet) component network is encapsulated as
     if it were a single component with inputs and outputs. I.e. component
     networks - distributed or not - are themselves components. Thus we must
     specify the CBTF type, version, inputs, and outputs of this MRNet-based
     component.
  -->

  <Type>Daemon_Tool_Demo</Type>
  <Version>1.0.0</Version>

  <Input>

    <!--
       The name of this input of the Daemon_Tool_Demo component.
    -->

    <Name>command</Name>

    <!--
       The frontend component network input to which this Daemon_Tool_Demo
       component input is attached. I.e. this corresponds to one of the
       <Input> sections within ./Frontend/Network
    -->
    <To><Input>command_to_frontend</Input></To>

  </Input>
  
  <Output>
    <Name>output</Name>
    <From><Output>output_from_frontend</Output></From>
  </Output>

  <!--
     This section specifies the component network to be placed on the frontend
     of the MRNet tree.
  -->

  <Frontend>
 
    <!--
       A single non-distributed, "local", component network is located on the
       frontend. Like every other component network, it is itself a component
       and thus must specify its CBTF type, version, inputs, and outputs.
    -->
    
    <Network>
      <Type>Daemon_Tool_Demo_Frontend</Type>
      <Version>1.0.0</Version>

      <!--
         All component networks must specify the plugins which contain the
         components they use. Note that a "plugin" in this case may refer to
         DSO containing one or more components. But it may also refer to an
         XML file that defines one or more component networks (which, once
         again, are themselves components). Search paths can be specified in
         order to avoid repeatedly specifying a full path for the plugin.
      -->
      
      <SearchPath>@demolib_location@</SearchPath>
      
      <Plugin>daemonToolDemoPlugin.so</Plugin>
      
      <Component>
        <Name>convert_command</Name>
        <Type>ConvertStringToPacket</Type>
      </Component>
      
      <Component>
        <Name>convert_output</Name>
        <Type>ConvertPacketToStringList</Type>
      </Component>
      
      <Input>
        <Name>command_to_frontend</Name>
         <To>
           <Name>convert_command</Name>
           <Input>in</Input>
         </To>
      </Input>
      
      <Input>
        <Name>output_from_network</Name>
        <To>
          <Name>convert_output</Name>
          <Input>in</Input>
        </To>
      </Input>
      
      <Output>
        <Name>command_to_network</Name>
        <From>
          <Name>convert_command</Name>
          <Output>out</Output>
        </From>
      </Output>
      
      <Output>
        <Name>output_from_frontend</Name>
        <From>
          <Name>convert_output</Name>
          <Output>out</Output>
        </From>
      </Output>
      
    </Network>

    <!--
       For CBTF's purposes, MRNet's communication mechanism is abstracted as
       zero or more symbolically-named upward or downward streams of data of
       a single type. On the frontend, we have incoming upward streams and
       outgoing downward streams. On the backends, we have incoming downward
       streams and outgoing upward streams. On the filters we have all 4.

       A particular input or output from a non-distributed, local, component
       network (such as the one defined above for the frontend) can be "bound"
       to an appropriate incoming/outgoing upward/downward stream using the
       notation shown below. In this example, we have a single incoming upward
       stream named "output_stream" bound to the "output_from_network" input of
       the above network, as well as a single outgoing downward stream to carry
       the command to all the backends.

       If a given named stream is not bound at a particular filter level of the
       MRNet tree, messages on it simply continues upward or downard in their
       original direction of travel. I.e. in this example, since there are no
       filters defined below, values sent downward on the "command_stream" by 
       the frontend will simply continue along their way until they reach the
       backends.
       
       If a given upward named stream is not bound within the frontend, values
       received on that stream are simply discarded. By the same token, if a
       given downward named stream is not bound within the backends, values
       received on that stream are simply discarded as well.

       The component network input or output to which a stream is bound must
       (currently) always be of the MRN::PacketPtr type. Hence in the plugin
       for this example you will find numerous conversion components that can
       translate data to/from MRN::PacketPtr. And in this XML file you will
       find numerous occurences of these components.
    -->
    
    <IncomingUpstream>
      <Name>output_stream</Name>
      <To><Input>output_from_network</Input></To>
    </IncomingUpstream>
    
    <OutgoingDownstream>
      <Name>command_stream</Name>
      <From><Output>command_to_network</Output></From>
    </OutgoingDownstream>
    
  </Frontend>

  <!--
     This example does not place component networks within the filters running
     on the MRNet frontend, communication processes, or backends. But if it did,
     this is where they would be specified...
  -->

  <!--
     The following section specifies the component network to be placed on every
     backend (daemon) in the MRNet tree.
  -->
  
  <Backend>

    <!--
       Just as with the frontend, a complete non-distributed component network
       must be specified for execution on the backends. Note that if LW MRNet
       is being used with the MRNet backend attach mode, this section should
       be omitted because the LW MRNet backend - being C-only code - will not
       be capable of instantiating a CBTF component network.
    -->
        
    <Network>
      
      <Type>Daemon_Tool_Demo_Backend</Type>
      <Version>1.0.0</Version>
      
      <SearchPath>@demolib_location@</SearchPath>
      
      <Plugin>daemonToolDemoPlugin.so</Plugin>
      
      <Component>
        <Name>convert_command</Name>
        <Type>ConvertPacketToString</Type>
      </Component>
      
      <Component>
        <Name>execute_command</Name>
        <Type>ExecuteCommand</Type>
      </Component>
      
      <Component>
        <Name>convert_output</Name>
        <Type>ConvertStringListToPacket</Type>
      </Component>
      
      <Input>
        <Name>command_from_network</Name>
        <To>
          <Name>convert_command</Name>
          <Input>in</Input>
        </To>
      </Input>
      
      <Connection>
        <From>
          <Name>convert_command</Name>
          <Output>out</Output>
        </From>
        <To>
          <Name>execute_command</Name>
          <Input>command</Input>
        </To>
      </Connection>
      
      <Connection>
        <From>
          <Name>execute_command</Name>
          <Output>output</Output>
        </From>
        <To>
          <Name>convert_output</Name>
          <Input>in</Input>
        </To>
      </Connection>
      
      <Output>
        <Name>output_to_network</Name>
        <From>
          <Name>convert_output</Name>
          <Output>out</Output>
        </From>
      </Output>

    </Network>
    
    <IncomingDownstream>
      <Name>command_stream</Name>
      <To><Input>command_from_network</Input></To>
    </IncomingDownstream>
    
    <OutgoingUpstream>
      <Name>output_stream</Name>
      <From><Output>output_to_network</Output></From>
    </OutgoingUpstream>
    
  </Backend>
</MRNet>
