#!/usr/bin/python
##===========================================================================##
#  Copyright (C) 2008 Los Alamos National Security, LLC. All Rights Reserved. #
#               Author: Samuel K. Gutierrez - samuel[at]lanl.gov              #
# Copyright (c) 2008-2011 Krell Institute  All Rights Reserved.               #
#               Author: Additional changes added by jeg                       #
#               Author: Additional changes added by dpm                       #
##===========================================================================##

#=============================================================================#
# This program is free software; you can redistribute it and/or modify it     #
# under the terms of the GNU General Public License as published by the Free  #
# Software Foundation; either version 2 of the License, or (at your option)   #
# any later version.                                                          #
#                                                                             #
# This program is distributed in the hope that it will be useful, but WITHOUT #
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       #
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for   #
# more details.                                                               #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with this program; if not, write to the Free Software Foundation, Inc., 59  #
# Temple Place, Suite 330, Boston, MA  02111-1307 USA                         #
#=============================================================================#

#LANL's Yellowrail MRNet site.py

import commands
import warnings 
from re import compile
warnings.simplefilter('ignore', DeprecationWarning)
from sets import Set
warnings.resetwarnings()
from sys import stdout
import os
import sys
import math
from os import path

# Flag indicating if debugging output will be displayed.
debug = False

#Flag indicating if a topology file update is needed
topFileUpdateNeeded = True

hostnodeName = os.uname()[1].split('.')[0]

if debug:
   print "hostnodeName=%s" % hostnodeName

hostnodeNameStrip = hostnodeName.rstrip('0123456789')
if debug:
   print "stripped hostnodeNameStrip=%s" % hostnodeNameStrip

# Location of user-specific CBTF preferences: $HOME/.cbtf
#cbtfuserpref = os.environ['HOME'] + os.sep + '.cbtf'
cbtfuserpref = "."

def PBSgetAllocatedNodesString():
    if os.environ.has_key('PBS_JOBID'):
        allocnodes = commands.getoutput('cat $PBS_NODEFILE  | uniq')
        if debug:
            print ' '
            #print "from getRawAllocatedNodesString, uniqallocnodes=%s" % uniqallocnodes
    else:
        print 'fatal error...PBS_JOBID not defined.'
        sys.exit()
    if debug:
       print "From getRawAllocatedNodesString, allocnodes=%s" % allocnodes
    return allocnodes

def prepENV(topologyStringHash):
    global topFileUpdateNeeded
    
    if debug:
        sys.stdout.write('checking for ' + cbtfuserpref + ' ...')
    
    # Check for presence of User-Specific CBTF Preference Directory:
    # $HOME/.cbtf.  We are assuming that this is the most
    # convenient place for autogenerated MRNet topology files.
    if os.path.isdir(cbtfuserpref):
        if debug:
            print 'present'
            sys.stdout.write('topology update needed...')
        
        #Overwrite CBTF_MRNET_TOPOLOGY_FILE
        newtopenv = cbtfuserpref + os.sep + 'cbtf_topology'
        
        os.environ['CBTF_MRNET_TOPOLOGY_FILE'] = newtopenv
        print 'Creating topology file: ' + newtopenv
    else:
        if debug:
            print 'not present'
            sys.stdout.write('topology update needed...')
        
        #Make Directory $HOME/.cbtf
        os.mkdir(cbtfuserpref, 0755)
        os.environ['CBTF_MRNET_TOPOLOGY_FILE'] = \
        cbtfuserpref + os.sep + 'cbtf_topology'

        print 'created topology file: ' + cbtfuserpref + os.sep + 'cbtf_topology'

    if os.path.isfile(os.environ['CBTF_MRNET_TOPOLOGY_FILE']):
        if debug:
            print 'no'
    else:
        if debug:
            print 'yes'
        topFileUpdateNeeded = True
    if debug:
        print ('CBTF_MRNET_TOPOLOGY_FILE: ' + \
        os.environ['CBTF_MRNET_TOPOLOGY_FILE'])

## haveCBTFPrefix()
# Returns True if $CBTF_PREFIX is a directory that exists.
# Returns False otherwise.
def haveCBTFPrefix():
    if os.getenv('CBTF_PREFIX'):
       return os.path.exists(os.environ['CBTF_PREFIX'])
    else:
       return False

## getCBTFPrefix()
# Returns the path pointed to by $CBTF_PREFIX.
# Returns NULL otherwise.
def getCBTFPrefix():
    if os.getenv('CBTF_PREFIX'):
       return os.path.realpath(os.environ['CBTF_PREFIX'])
    else:
       return NULL

## haveTopgen()
# Returns True if mrnet_topgen is present in $CBTF_PREFIX/bin.
# Returns False otherwise.
# FIXME: Depends on CBTF_PREFIX.  Really should just try and
# find mrnet_topgen in users path via something like which.
def haveTopgen():
    return os.path.isfile(os.environ['CBTF_PREFIX'] + os.sep + 'bin' + \
                        os.sep + 'mrnet_topgen')

## PBSgenerateBalancedMRNetTopologyString(degree, numleaves)
# Returns mrnet_topgen-based MRNet topology string.
def PBSgenerateBalancedMRNetTopologyString(degree, numleaves):
    mrntstr = 'echo "' + PBSgetAllocatedNodesString() + '" | ' + \
				'mrnet_topgen -b %dx%d' % (degree, numleaves)
    
    #Capture generated MRNet topology string
    mrntopstr = commands.getoutput(mrntstr)
    
    if debug:
        print mrntopstr

    return mrntopstr
    
def createTopologyFile(topologyString):
    #Make certain CBTF_MRNET_TOPOLOGY_FILE is present

    if debug:
       print "In createTopologyFile, topologyString=%s" % topologyString

    #FIXME: Depends on environment variable only.
    if os.environ.has_key('CBTF_MRNET_TOPOLOGY_FILE'):
        try:
            topfile = open(os.environ['CBTF_MRNET_TOPOLOGY_FILE'], 'w')
            topfile.write(topologyString)
            topfile.close()
        except:
            exc_info = sys.exc_info()
            print exc_info[1]
            print ('an error was encountered during MRNet topology file ' +
            'generation...')
            sys.exit()
    else:
        print ('CBTF_MRNET_TOPOLOGY_FILE environment variable ' +
        'not defined...')
        sys.exit()
    
def PBSgetAllocatedNodeCount():
    rlnodeinfo = commands.getoutput('qstat -f $PBS_JOBID | ' + 
    'grep Resource_List.nodes')
    return int(rlnodeinfo.split(' ')[-1].split(':')[0])
     
def PBSgetAllocatedNodePPNCount():
    rlnodeinfo = commands.getoutput('qstat -f $PBS_JOBID | ' +
    'grep Resource_List.nodes')
    
    return int(rlnodeinfo.split(' ')[-1].split('=')[-1])

##generateSimpleFlatTopologyString() 
def generateSimpleFlatTopologyString():
    #Strip .lanl.gov
    hostname = os.uname()[1]
    hostname = hostname.split('.')[0]
    
    return hostname + ':0 => \n' + '  ' + hostname + ':1 ;'

#TODO:FIXME 
def PBSgenerateSimpleBETopologyString():
    nodelist = PBSgetAllocatedNodesString().split('\n')
    
    topstring = nodelist[0] + ':0 =>\n  ' + nodelist[0] + ':1'


    #count = 2
    for node in nodelist[1::1]:
        topstring += '\n  ' + node + ':0'
    #    topstring += '\n  %s:%d' % (node, count)
    #    count += 1
    
    topstring += ' ;'
    return topstring

#SLURM
def SLURMgenerateSimpleBETopologyString():
    if os.getenv('SLURM_JOB_NUM_NODES'):
       num_nodes = os.environ['SLURM_JOB_NUM_NODES']

    if os.getenv('SLURM_JOB_NODELIST'):
        nodelist = os.environ['SLURM_JOB_NODELIST']

    print "Generating topology for Slurm job on " + hostnodeName
    print "Number of nodes: " + num_nodes
    print "Nodelist: " + nodelist

    nodes = []
    if nodelist.find('[') > -1:
        l = nodelist.split('[')
        n = l[0]
        r = l[1]
        r = r.strip(']')
        ranges = []
        while r.find(',') > -1:
           r1, r = r.split(',')
           ranges.append(r1)
        ranges.append(r)
        for r in ranges:
            if r.find('-'):
               s,e = r.split('-')
               for i in range(int(s), int(e)+1, 1):
                   nodes.append(n + "%d" % i)
            else:
                   nodes.append(n + r)
    else:
        nodes.append(nodelist)

    nodestring = ""
    for node in nodes[0::1]:
	nodestring += node + '\n'

    #print nodestring
    nodefile = open("./mynodes", 'w')
    nodefile.write(nodestring)
    nodefile.close()

    fanout = 0
    depth = 1;
    for x in range(1,1024):
	inner = math.pow(float(num_nodes), (float(1.0) / float(x)))
        fanout = int(math.ceil(inner))
        if fanout < 16:
	    depth = x
            break
    if fanout <= num_nodes:
	fanout = fanout / 2
    print "Creating balanced tree with depth %d, fanout %d" % (depth,fanout)

    # attempt to create a balanced tree of this depth and fanout
    # NOTE: could use mrnet_topgen options to write file too.
    # example: mrnet_topgen -c cp-hosts-file -b be-hosts-file -f fe-host -o output-file -q max-be-procs -r max-cp-procs
    mrntstr = 'mrnet_topgen --topology=b:%dx%d' % (fanout, depth) + " --hosts ./mynodes"
    print "Command to use for topology:"
    print mrntstr

    #Capture generated MRNet topology string
    mrntopstr = commands.getoutput(mrntstr)

    print mrntopstr

    return mrntopstr


# Overkill
def getStringHashValue(inputString):
    return hex(hash(inputString))

# main()
def main():

    #Make sure that .cbtf is created before used
    if os.path.isdir(cbtfuserpref):
        if debug:
            print '.cbtf directory exists'
    else:
        #Make Directory $HOME/.cbtf
        os.mkdir(cbtfuserpref, 0755)
        if debug:
            print '.cbtf directory created'

    #Assuming presence of PBS_JOBID is a good 
    #indicator that we are on compute nodes
    if os.environ.has_key('PBS_JOBID'):
        if debug:
            print 'on compute node...'
        prepENV(getStringHashValue("PBS"))

        if debug:
            print ""
            print "An MRNet Configuration has been created for you - please"
            print "check if this is consistent with your partition."
            print ""
            print "Current MRNet configuration in " + cbtfuserpref
            print ""
            print PBSgenerateSimpleBETopologyString()
        if debug:
           print "after print of PBSgenerateSimpleBETopologyString()"

        #TODO:FIXME Simple hack to get things going
        if(topFileUpdateNeeded):
            createTopologyFile(PBSgenerateSimpleBETopologyString())

    #Assuming presence of SLURM_JOBID is a good 
    #indicator that we are on compute nodes
    elif (os.environ.has_key("SLURM_JOBID")):
        if debug:
            print 'USING SLURM ... from node ' + hostnodeName

        prepENV(getStringHashValue("SLURM"))
        #TODO:FIXME Simple hack to get things going
        if(topFileUpdateNeeded):
            createTopologyFile(SLURMgenerateSimpleBETopologyString())

    #If PBS_JOBID or SLURM_JOBID is not present, then we
    #better be on a compile node...
    else:
        if debug:
          if(haveCBTFPrefix()):
            print 'We have CBTF_PREFIX set'
          else:
            print 'We do NOT have CBTF_PREFIX set'

          if(haveCBTFPrefix()):
              print 'CBTF_PREFIX=' + getCBTFPrefix()

        if debug:
            print 'on compile node...' \
                  + hostnodeName

        # create list of nodes.
        cmdstr = "uname -n > " + cbtfuserpref + os.sep + ".cbtf-mrnet-hosts"
        os.system(cmdstr);
 
        prepENV(getStringHashValue("SIMPLEFLAT"))
        #print generateSimpleFlatTopologyString()
        if(topFileUpdateNeeded):
            createTopologyFile(generateSimpleFlatTopologyString())

if __name__ == '__main__' :
    #Used to suppress python hex() Future Warning message.
    warnings.filterwarnings('ignore')
    main()
